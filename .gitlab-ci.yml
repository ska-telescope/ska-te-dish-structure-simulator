variables:
  GIT_SUBMODULE_STRATEGY: recursive

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

stages:
  - lint
  - build
  - deploy
  - test
  - mid-itf
  - scan
  - publish
  - pages

# Include CI templates
include:
  # make oci-lint
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image-lint.gitlab-ci.yml"

  # make oci-build-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"

  # Helm Charts
  # Linting stage
  # make helm-lint
  # make helm-build (create a publishable helm chart artefact)
  # make helm-publish
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/helm-chart.gitlab-ci.yml"

  # k8s steps
  # k8s-install-chart
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/k8s-test-runner.gitlab-ci.yml"

  # deploy steps
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/deploy.dev.gitlab-ci.yml"

  # release steps
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"

  # Changelog steps
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/changelog.gitlab-ci.yml"

  # lint only: we don't have our own code in here
  # & tests require a deployment in k8s.
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python-lint.gitlab-ci.yml"

info-dev-environment:
  variables:
    KUBE_NAMESPACE: "ci-dev-$CI_PROJECT_NAME"
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME"
  script:
    - make deployment-info
    - make credentials
    - make template-chart

.mid-itf:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: mid-itf
  tags:
    - ska-k8srunner-za-itf
  when: manual
  variables:
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME"
    CLUSTER_DOMAIN: miditf.internal.skao.int
    INGRESS_HOST: k8s.miditf.internal.skao.int
    SERVICE_ACCOUNT: ci-svc-$CI_PROJECT_NAME
    NEXUS_CACHE: NEXUS_CACHE

deploy-mid-itf:
  extends: .mid-itf
  environment:
    name: ci-mid-itf-$CI_PROJECT_NAME
    on_stop: stop-mid-itf
  script:
    - make k8s-install-chart
    - make k8s-wait

info-mid-itf:
  extends: .mid-itf
  environment:
    name: ci-mid-itf-$CI_PROJECT_NAME
  script:
    - make deployment-info

stop-mid-itf:
  extends: .mid-itf
  needs:
    - deploy-mid-itf
  environment:
    name: ci-mid-itf-$CI_PROJECT_NAME
    action: stop
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace

redeploy-mid-itf:
  extends: .mid-itf
  environment:
    name: ci-mid-itf-$CI_PROJECT_NAME
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
    - make k8s-install-chart

k8s-test-runner:
  tags:
    # - k8srunner
    - ska-k8srunner-za-itf
  variables:
    # CLUSTER_DOMAIN: cluster.local
    CLUSTER_DOMAIN: miditf.internal.skao.int
    DS_SIM_NAMESPACE: $KUBE_NAMESPACE
    DS_SIM_SERVICE: ds-sim
    DS_SIM_SERVER_CERT: $CI_PROJECT_DIR/.secure_files/SimpleServer_2048.der
  allow_failure: false
  before_script:
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - "make help | grep k8s-test"
    - make k8s-install-chart
    - make k8s-wait
